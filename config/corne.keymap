/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W               &kp E           &kp R           &kp T             &kp Y      &kp U            &kp I              &kp O                &kp P                        &none
&none  &kp A  &mt LEFT_CONTROL S  &mt LEFT_ALT D  &mt LEFT_GUI F  &kp G             &kp H      &mt RIGHT_GUI J  &mt RIGHT_ALT K    &mt RIGHT_CONTROL L  &mt LA(BACKSPACE) BACKSPACE  &none
&none  &kp Z  &kp X               &kp C           &kp V           &kp B             &kp N      &kp M            &kp COMMA          &kp DOT              &kp FSLH                     &none
                                  &kp LEFT_ALT    &mo 1           &kp LEFT_SHIFT    &kp SPACE  &mo 2            &kp RIGHT_CONTROL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp ESCAPE  &kp N7  &kp N8  &kp N9        &kp N0    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS      &kp EQUAL      &trans        &trans
&trans  &kp GRAVE   &kp N4  &kp N5  &kp N6        &trans    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp BACKSLASH  &kp SEMICOLON  &kp CAPSLOCK  &trans
&trans  &kp TAB     &kp N1  &kp N2  &kp NUMBER_3  &trans    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SQT        &trans         &trans        &trans
                            &trans  &trans        &trans    &trans                &trans                 &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &trans     &kp DELETE  &trans
&trans  &trans           &trans       &trans    &trans      &trans         &kp LEFT   &kp DOWN       &kp UP_ARROW  &kp RIGHT  &kp ENTER   &trans
&trans  &trans           &trans       &trans    &trans      &trans         &trans     &kp INS        &kp HOME      &kp END    &trans      &trans
                                      &trans    &trans      &trans         &trans     &trans         &trans
            >;
        };

        both_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp C_PLAY_PAUSE  &kp C_PREV    &kp C_NEXT    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &kp C_MUTE  &trans    &trans     &trans        &kp DELETE  &trans
&trans  &bt BT_SEL 0      &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4       &kp LEFT    &kp DOWN  &kp RIGHT  &kp UP_ARROW  &kp RET     &trans
&trans  &trans            &trans        &trans        &trans             &bt BT_CLR         &trans      &kp INS   &kp HOME   &kp END       &trans      &trans
                                        &trans        &trans             &trans             &trans      &trans    &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
